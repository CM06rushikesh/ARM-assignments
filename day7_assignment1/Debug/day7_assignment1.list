
day7_assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000674  0800067c  0000167c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000674  08000674  0000167c  2**0
                  CONTENTS
  4 .ARM          00000000  08000674  08000674  0000167c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000674  0800067c  0000167c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000674  08000674  00001674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000678  08000678  00001678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000167c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000167c  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bab  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f8  00000000  00000000  00003251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ca  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001842c  00000000  00000000  00003b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a86  00000000  00000000  0001bf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf5e  00000000  00000000  0001d9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a995a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002fc  00000000  00000000  000a99a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  000a9cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800065c 	.word	0x0800065c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800065c 	.word	0x0800065c

080001c8 <LedInit>:
#include "led.h"
#include "stm32f4xx.h"


void LedInit (uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// clock enable
	RCC->AHB1ENR |= BV (LED_GPIO_EN);
 80001d0:	4b24      	ldr	r3, [pc, #144]	@ (8000264 <LedInit+0x9c>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a23      	ldr	r2, [pc, #140]	@ (8000264 <LedInit+0x9c>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// SET GPIO PIN OUTPUT
  BB_ALS(&LED_GPIO->MODER, (pin*2))=1;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80001e6:	f503 0383 	add.w	r3, r3, #4292608	@ 0x418000
 80001ea:	461a      	mov	r2, r3
 80001ec:	2301      	movs	r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
  BB_ALS(&LED_GPIO->MODER, (pin*2+1))=0;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	3301      	adds	r3, #1
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80001fc:	f503 0383 	add.w	r3, r3, #4292608	@ 0x418000
 8000200:	461a      	mov	r2, r3
 8000202:	2300      	movs	r3, #0
 8000204:	6013      	str	r3, [r2, #0]
  // set pin speed to low
  BB_ALS (&LED_GPIO->OSPEEDR, (pin*2))=0;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	009a      	lsls	r2, r3, #2
 800020c:	4b16      	ldr	r3, [pc, #88]	@ (8000268 <LedInit+0xa0>)
 800020e:	4413      	add	r3, r2
 8000210:	461a      	mov	r2, r3
 8000212:	2300      	movs	r3, #0
 8000214:	6013      	str	r3, [r2, #0]
  BB_ALS (&LED_GPIO->OSPEEDR,(pin*2+1))=0;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	3301      	adds	r3, #1
 800021c:	009a      	lsls	r2, r3, #2
 800021e:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <LedInit+0xa0>)
 8000220:	4413      	add	r3, r2
 8000222:	461a      	mov	r2, r3
 8000224:	2300      	movs	r3, #0
 8000226:	6013      	str	r3, [r2, #0]
  // set gpio for nopull no pull down
  BB_ALS (&LED_GPIO->PUPDR, (pin*2))=0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	009a      	lsls	r2, r3, #2
 800022e:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <LedInit+0xa4>)
 8000230:	4413      	add	r3, r2
 8000232:	461a      	mov	r2, r3
 8000234:	2300      	movs	r3, #0
 8000236:	6013      	str	r3, [r2, #0]
  BB_ALS (&LED_GPIO->PUPDR,(pin*2+1))=0;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	3301      	adds	r3, #1
 800023e:	009a      	lsls	r2, r3, #2
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <LedInit+0xa4>)
 8000242:	4413      	add	r3, r2
 8000244:	461a      	mov	r2, r3
 8000246:	2300      	movs	r3, #0
 8000248:	6013      	str	r3, [r2, #0]
	// set gpio pin for push pull
  BB_ALS(&LED_GPIO->OTYPER, pin) = 0;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	009a      	lsls	r2, r3, #2
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <LedInit+0xa8>)
 8000250:	4413      	add	r3, r2
 8000252:	461a      	mov	r2, r3
 8000254:	2300      	movs	r3, #0
 8000256:	6013      	str	r3, [r2, #0]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	42418100 	.word	0x42418100
 800026c:	42418180 	.word	0x42418180
 8000270:	42418080 	.word	0x42418080

08000274 <main>:

extern int count;

int main(void)

{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0

	char scount[15];

	int cState = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

	int pState = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]

	SystemInit();
 8000282:	f000 f8a5 	bl	80003d0 <SystemInit>

	LedInit(LED_ORANGE);
 8000286:	200d      	movs	r0, #13
 8000288:	f7ff ff9e 	bl	80001c8 <LedInit>

	UartInit(BAUD_9600);
 800028c:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000290:	f000 f8f0 	bl	8000474 <UartInit>

	SwitchInit(SWITCH);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f825 	bl	80002e4 <SwitchInit>

	while(1)


		while(exti0_flag == 0)
 800029a:	bf00      	nop
 800029c:	4b02      	ldr	r3, [pc, #8]	@ (80002a8 <main+0x34>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0fb      	beq.n	800029c <main+0x28>
 80002a4:	e7f9      	b.n	800029a <main+0x26>
 80002a6:	bf00      	nop
 80002a8:	2000001c 	.word	0x2000001c

080002ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	db0b      	blt.n	80002d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 021f 	and.w	r2, r3, #31
 80002c4:	4906      	ldr	r1, [pc, #24]	@ (80002e0 <__NVIC_EnableIRQ+0x34>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	095b      	lsrs	r3, r3, #5
 80002cc:	2001      	movs	r0, #1
 80002ce:	fa00 f202 	lsl.w	r2, r0, r2
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <SwitchInit>:
 *      Author: Nilesh
 */

#include "switch.h"

void SwitchInit(uint32_t pin) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80002ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000398 <SwitchInit+0xb4>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	4a29      	ldr	r2, [pc, #164]	@ (8000398 <SwitchInit+0xb4>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002f8:	4b28      	ldr	r3, [pc, #160]	@ (800039c <SwitchInit+0xb8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	3201      	adds	r2, #1
 8000302:	2101      	movs	r1, #1
 8000304:	4091      	lsls	r1, r2
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	2001      	movs	r0, #1
 800030c:	fa00 f202 	lsl.w	r2, r0, r2
 8000310:	430a      	orrs	r2, r1
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a21      	ldr	r2, [pc, #132]	@ (800039c <SwitchInit+0xb8>)
 8000318:	400b      	ands	r3, r1
 800031a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800031c:	4b1f      	ldr	r3, [pc, #124]	@ (800039c <SwitchInit+0xb8>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	3201      	adds	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4091      	lsls	r1, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	0052      	lsls	r2, r2, #1
 800032e:	2001      	movs	r0, #1
 8000330:	fa00 f202 	lsl.w	r2, r0, r2
 8000334:	430a      	orrs	r2, r1
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a18      	ldr	r2, [pc, #96]	@ (800039c <SwitchInit+0xb8>)
 800033c:	400b      	ands	r3, r1
 800033e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000340:	4b16      	ldr	r3, [pc, #88]	@ (800039c <SwitchInit+0xb8>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	3201      	adds	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4091      	lsls	r1, r2
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2001      	movs	r0, #1
 8000354:	fa00 f202 	lsl.w	r2, r0, r2
 8000358:	430a      	orrs	r2, r1
 800035a:	43d2      	mvns	r2, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a0f      	ldr	r2, [pc, #60]	@ (800039c <SwitchInit+0xb8>)
 8000360:	400b      	ands	r3, r1
 8000362:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 8000364:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <SwitchInit+0xbc>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <SwitchInit+0xbc>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 8000370:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <SwitchInit+0xbc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <SwitchInit+0xbc>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800037c:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <SwitchInit+0xc0>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a08      	ldr	r2, [pc, #32]	@ (80003a4 <SwitchInit+0xc0>)
 8000382:	f023 030f 	bic.w	r3, r3, #15
 8000386:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000388:	2006      	movs	r0, #6
 800038a:	f7ff ff8f 	bl	80002ac <__NVIC_EnableIRQ>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800
 800039c:	40020000 	.word	0x40020000
 80003a0:	40013c00 	.word	0x40013c00
 80003a4:	40013800 	.word	0x40013800

080003a8 <EXTI0_IRQHandler>:

// Global flag for interrupt
volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <EXTI0_IRQHandler+0x20>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a05      	ldr	r2, [pc, #20]	@ (80003c8 <EXTI0_IRQHandler+0x20>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <EXTI0_IRQHandler+0x24>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40013c00 	.word	0x40013c00
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  DWT_Init();
 80003d4:	f000 f802 	bl	80003dc <DWT_Init>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <DWT_Init+0x58>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a13      	ldr	r2, [pc, #76]	@ (8000434 <DWT_Init+0x58>)
 80003e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003ea:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <DWT_Init+0x58>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <DWT_Init+0x58>)
 80003f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003f6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <DWT_Init+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <DWT_Init+0x5c>)
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000404:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <DWT_Init+0x5c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0b      	ldr	r2, [pc, #44]	@ (8000438 <DWT_Init+0x5c>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <DWT_Init+0x5c>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000416:	bf00      	nop
    __ASM volatile ("NOP");
 8000418:	bf00      	nop
    __ASM volatile ("NOP");
 800041a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <DWT_Init+0x5c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2b00      	cmp	r3, #0
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000edf0 	.word	0xe000edf0
 8000438:	e0001000 	.word	0xe0001000

0800043c <__NVIC_EnableIRQ>:
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	db0b      	blt.n	8000466 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	f003 021f 	and.w	r2, r3, #31
 8000454:	4906      	ldr	r1, [pc, #24]	@ (8000470 <__NVIC_EnableIRQ+0x34>)
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	095b      	lsrs	r3, r3, #5
 800045c:	2001      	movs	r0, #1
 800045e:	fa00 f202 	lsl.w	r2, r0, r2
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	e000e100 	.word	0xe000e100

08000474 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800047c:	4b32      	ldr	r3, [pc, #200]	@ (8000548 <UartInit+0xd4>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a31      	ldr	r2, [pc, #196]	@ (8000548 <UartInit+0xd4>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000488:	4b30      	ldr	r3, [pc, #192]	@ (800054c <UartInit+0xd8>)
 800048a:	6a1b      	ldr	r3, [r3, #32]
 800048c:	4a2f      	ldr	r2, [pc, #188]	@ (800054c <UartInit+0xd8>)
 800048e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000492:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000494:	4b2d      	ldr	r3, [pc, #180]	@ (800054c <UartInit+0xd8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a2c      	ldr	r2, [pc, #176]	@ (800054c <UartInit+0xd8>)
 800049a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80004a0:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <UartInit+0xd8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a29      	ldr	r2, [pc, #164]	@ (800054c <UartInit+0xd8>)
 80004a6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004aa:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80004ac:	4b27      	ldr	r3, [pc, #156]	@ (800054c <UartInit+0xd8>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	4a26      	ldr	r2, [pc, #152]	@ (800054c <UartInit+0xd8>)
 80004b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004b6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80004b8:	4b24      	ldr	r3, [pc, #144]	@ (800054c <UartInit+0xd8>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a23      	ldr	r2, [pc, #140]	@ (800054c <UartInit+0xd8>)
 80004be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004c2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80004c4:	4b21      	ldr	r3, [pc, #132]	@ (800054c <UartInit+0xd8>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a20      	ldr	r2, [pc, #128]	@ (800054c <UartInit+0xd8>)
 80004ca:	f023 030c 	bic.w	r3, r3, #12
 80004ce:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80004d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <UartInit+0xd4>)
 80004d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000548 <UartInit+0xd4>)
 80004d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004da:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80004dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <UartInit+0xdc>)
 80004de:	220c      	movs	r2, #12
 80004e0:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <UartInit+0xdc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80004e8:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <UartInit+0xdc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80004f4:	d016      	beq.n	8000524 <UartInit+0xb0>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80004fc:	d816      	bhi.n	800052c <UartInit+0xb8>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000504:	d004      	beq.n	8000510 <UartInit+0x9c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800050c:	d005      	beq.n	800051a <UartInit+0xa6>
 800050e:	e00d      	b.n	800052c <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <UartInit+0xdc>)
 8000512:	f240 6283 	movw	r2, #1667	@ 0x683
 8000516:	609a      	str	r2, [r3, #8]
			break;
 8000518:	e008      	b.n	800052c <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <UartInit+0xdc>)
 800051c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000520:	609a      	str	r2, [r3, #8]
			break;
 8000522:	e003      	b.n	800052c <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <UartInit+0xdc>)
 8000526:	228b      	movs	r2, #139	@ 0x8b
 8000528:	609a      	str	r2, [r3, #8]
			break;
 800052a:	bf00      	nop
	}
	// enable uart interrupt in nvic
	NVIC_EnableIRQ(USART2_IRQn);
 800052c:	2026      	movs	r0, #38	@ 0x26
 800052e:	f7ff ff85 	bl	800043c <__NVIC_EnableIRQ>
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <UartInit+0xdc>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <UartInit+0xdc>)
 8000538:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800053c:	60d3      	str	r3, [r2, #12]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	40020000 	.word	0x40020000
 8000550:	40004400 	.word	0x40004400

08000554 <USART2_IRQHandler>:
	tx_index++;
	// enable uart txeie interrupt
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
}

void USART2_IRQHandler(void) {
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	// check if last char tx
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <USART2_IRQHandler+0x5c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000560:	2b00      	cmp	r3, #0
 8000562:	d021      	beq.n	80005a8 <USART2_IRQHandler+0x54>
		// send next char if available
		if(tx_string[tx_index] != '\0') {
 8000564:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <USART2_IRQHandler+0x60>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a13      	ldr	r2, [pc, #76]	@ (80005b8 <USART2_IRQHandler+0x64>)
 800056a:	6812      	ldr	r2, [r2, #0]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00d      	beq.n	8000590 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 8000574:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <USART2_IRQHandler+0x60>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <USART2_IRQHandler+0x64>)
 800057a:	6812      	ldr	r2, [r2, #0]
 800057c:	4413      	add	r3, r2
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <USART2_IRQHandler+0x5c>)
 8000582:	605a      	str	r2, [r3, #4]
			tx_index++;
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <USART2_IRQHandler+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <USART2_IRQHandler+0x64>)
 800058c:	6013      	str	r3, [r2, #0]
			tx_complete = 1;
			// disable uart txeie interrupt
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 800058e:	e00b      	b.n	80005a8 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <USART2_IRQHandler+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <USART2_IRQHandler+0x68>)
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <USART2_IRQHandler+0x5c>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a03      	ldr	r2, [pc, #12]	@ (80005b0 <USART2_IRQHandler+0x5c>)
 80005a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40004400 	.word	0x40004400
 80005b4:	20000020 	.word	0x20000020
 80005b8:	20000024 	.word	0x20000024
 80005bc:	20000028 	.word	0x20000028

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f7ff ff04 	bl	80003d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	@ (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ee:	f000 f811 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff fe3f 	bl	8000274 <main>

080005f6 <LoopForever>:

LoopForever:
  b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	0800067c 	.word	0x0800067c
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	2000002c 	.word	0x2000002c

08000610 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4d0d      	ldr	r5, [pc, #52]	@ (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	@ (8000650 <__libc_init_array+0x3c>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2600      	movs	r6, #0
 8000620:	42a6      	cmp	r6, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4d0b      	ldr	r5, [pc, #44]	@ (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	@ (8000658 <__libc_init_array+0x44>)
 8000628:	f000 f818 	bl	800065c <_init>
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2600      	movs	r6, #0
 8000632:	42a6      	cmp	r6, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f855 3b04 	ldr.w	r3, [r5], #4
 800063c:	4798      	blx	r3
 800063e:	3601      	adds	r6, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f855 3b04 	ldr.w	r3, [r5], #4
 8000646:	4798      	blx	r3
 8000648:	3601      	adds	r6, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000674 	.word	0x08000674
 8000650:	08000674 	.word	0x08000674
 8000654:	08000674 	.word	0x08000674
 8000658:	08000678 	.word	0x08000678

0800065c <_init>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr

08000668 <_fini>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr
